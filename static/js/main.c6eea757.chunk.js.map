{"version":3,"sources":["components/DropDownMenu.js","components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["BoardsMenu","title","items","onChosenCallback","useState","open","setOpen","className","role","onClick","map","item","key","board","id","type","handleOnClick","name","Card","props","text","emoji","getUnicode","deleteCardcallBack","NewCardForm","cardForm","setCardForm","onInputChange","event","newForm","target","value","onSubmit","preventDefault","addCardCallBack","htmlFor","onChange","BOARDS","Board","cardsList","setCardsList","errorMessage","setErrorMessage","boardName","currentBoard","setCurrentBoard","useEffect","axios","get","url","then","response","newCardsList","data","catch","error","console","log","message","filter","post","card","length","delete","newEmoji","getName","newCard","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c6eea757.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './DropDownMenu.css';\n\n\nconst BoardsMenu = ({ title, items = [], onChosenCallback }) => {\n\tconst [ open, setOpen ] = useState(false);\n\tconst toggle = () => setOpen(!open);\n\n\tconst handleOnClick = (item) => {\n    setOpen(!open);\n\t\tonChosenCallback(item);\n\t};\n\n\treturn (\n\t\t<div className=\"dd-container\">\n\t\t\t<div\n\t\t\t\tclassName=\"dd-header\"\n\t\t\t\trole=\"button\"\n\t\t\t\tonClick={() => toggle(!open)}\n\t\t\t>\n\t\t\t  <h4 className=\"dd-header__title\"><span className=\"header__text\">{title}...</span></h4>\n\t\t\t</div>\n\t\t\t{open && (\n\t\t\t\t<ul className=\"dd-list\">\n\t\t\t\t\t{items.map((item) => (\n\t\t\t\t\t\t<li className=\"dd-list-item\" key={item.board.id}>\n\t\t\t\t\t\t\t<button type=\"button\" onClick={() => handleOnClick(item)}>\n\t\t\t\t\t\t\t\t<span>{item.board.name}</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nBoardsMenu.propTypes = {\n  title: PropTypes.string.isRequired,\n  items:PropTypes.array.isRequired,\n  onChosenCallback: PropTypes.func.isRequired,\n};\n\nexport default BoardsMenu;\n\n// const BoardsMenu = ({ title, items = [], onChosenCallback }) => {\n\n//   const handleOnClick = (item) => {\n// \t\tonChosenCallback(item);\n// \t};\n\n//   return (\n//     <div >\n//       <select name=\"choice\" >\n\n// \t\t\t\t\t{items.map((item) => (\n//             <option \n//               value={item.board.name}\n//               onClick={() => handleOnClick(item)}\n//             >\n//               {item.board.name}\n//             </option>\n// \t\t\t\t\t))}\n\n//       </select>\n//     </div>\n//   );\n// };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './Card.css';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className={`card ${props.id % 2 ? '' : 'pink'}`}>\n\t\t\t<div className=\"card__content\">\n\t\t\t\t<p className=\"card__content-text\">{props.text}</p>\n\t\t\t\t<p className=\"card__content-emoji\">{props.emoji && emoji.getUnicode(props.emoji)}</p>\n\t\t\t\t<div className=\"card__delete_div\">\n\t\t\t\t\t<button onClick={() => props.deleteCardcallBack(props.id)} className=\"card__delete\">\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nCard.propTypes = {\n\ttext               : PropTypes.string,\n\temoji              : PropTypes.string,\n\tid                 : PropTypes.number,\n\tdeleteCardcallBack : PropTypes.func.isRequired\n};\n\nexport default Card;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCardForm.css';\n\nconst NewCardForm = (props) => {\n\tconst [ cardForm, setCardForm ] = useState({\n\t\ttext  : '',\n\t\temoji : '',\n\t});\n\n\tconst onInputChange = (event) => {\n\t\tconst newForm = { ...cardForm };\n\t\tnewForm[event.target.name] = event.target.value;\n\t\tsetCardForm(newForm);\n\t};\n\n\tconst onFormSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tprops.addCardCallBack(cardForm);\n\t\tsetCardForm({\n\t\t\ttext  : '',\n\t\t\temoji : '',\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"new-card-form\">\n\t\t\t<header className=\"new-card-form__header\">\n\t\t\t\t<h3 className='header__text' >Make a new Card!</h3>\n\t\t\t</header>\n\t\t\t<form className=\"new-card-form__form\" onSubmit={onFormSubmit}>\n\t\t\t\t<label htmlFor=\"text\" className=\"new-card-form__form-label\">\n\t\t\t\t\tText\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tid=\"text\"\n\t\t\t\t\tname=\"text\"\n\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\tvalue={cardForm.text}\n\t\t\t\t\tclassName=\"new-card-form__form-textarea\"\n\t\t\t\t/>\n\t\t\t\t<label htmlFor=\"emoji\" className=\"new-card-form__form-label\">\n\t\t\t\t\tEmoji\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tid=\"emoji\"\n\t\t\t\t\tname=\"emoji\"\n\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\tvalue={cardForm.emoji}\n\t\t\t\t\tclassName=\"new-card-form__form-textarea\"\n\t\t\t\t/>\n\t\t\t\t<button className=\"new-card-form__form-button\">Post New Card</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nNewCardForm.propTypes = {\n\taddCardCallBack : PropTypes.func.isRequired,\n};\n\nexport default NewCardForm;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport axios from 'axios';\nimport './Board.css';\nimport DropDownMenu from './DropDownMenu';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\nconst Board = (props) => {\n\tconst [ cardsList, setCardsList ] = useState([]);\n\tconst [ errorMessage, setErrorMessage ] = useState(null);\n\tconst [ currentBoard, setCurrentBoard ] = useState(props.boardName);\n\n\tuseEffect(\n\t\t() => {\n\t\t\taxios\n\t\t\t\t.get(props.url + currentBoard + '/cards')\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconst newCardsList = response.data;\n          setCardsList(newCardsList);\n          setErrorMessage(null);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.log(error.message);\n\t\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\t});\n\t\t},\n\t\t[ currentBoard, props.url ]\n\t);\n\n\tconst deleteCardcallBack = (id) => {\n\t\tconst newCardsList = cardsList.filter((post) => {\n\t\t\treturn post.card.id !== id;\n\t\t});\n\n\t\tif (newCardsList.length < cardsList.length) {\n\t\t\taxios\n\t\t\t\t.delete(`https://inspiration-board.herokuapp.com/cards/${id}`)\n\t\t\t\t.then((response) => {\n          console.log(`Card ${response.data.card.id} was deleted`);\n          setErrorMessage(null);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tsetErrorMessage(`Error: ${error.message}`);\n\t\t\t\t});\n\t\t}\n\n\t\tsetCardsList(newCardsList);\n\t};\n\n\tconst addCardCallBack = (card) => {\n\t\tlet newEmoji = emoji.getName(card.emoji);\n\t\tif (!newEmoji) {\n\t\t\tnewEmoji = card.emoji;\n\t\t}\n\t\taxios\n\t\t\t.post(`https://inspiration-board.herokuapp.com/boards/${currentBoard}/cards?text=${card.text}&emoji=${newEmoji}`)\n\t\t\t.then((response) => {\n\t\t\t\tconst newCard = response.data;\n\t\t\t\tconst newCardsList = [ ...cardsList, newCard ];\n        setCardsList(newCardsList);\n        setErrorMessage(null);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tsetErrorMessage(`Error: ${error.message}`);\n\t\t\t});\n\t};\n\n\tconst chooseBoard = (item) => {\n\t\tsetCurrentBoard(item.board.name);\n\t};\n\n\tconst board = cardsList.map((post) => {\n\t\treturn (\n\t\t\t<div key={post.card.id}>\n\t\t\t\t<Card deleteCardcallBack={deleteCardcallBack} id={post.card.id} text={post.card.text} emoji={post.card.emoji} />\n\t\t\t</div>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"Board\">\n\t\t\t{errorMessage ? (\n\t\t\t\t<div>\n\t\t\t\t\t<h2 className=\"validation-errors-display\">{errorMessage}</h2>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t''\n\t\t\t)}\n\t\t\t<h2> Current Board @ {currentBoard} </h2>\n\t\t\t<DropDownMenu title=\"Choose Board\" items={BOARDS} onChosenCallback={chooseBoard} />\n\t\t\t<div className='card-container'>\n\t\t\t\t\t{board}\n\t\t\t</div>\n      <h2>You are posting @ {currentBoard} </h2>\n\t\t\t<NewCardForm addCardCallBack={addCardCallBack} />\n\t\t</div>\n\t);\n};\n\nconst BOARDS = [\n  {\n    board : {\n      id   : 254,\n      name : 'cathynikki'\n    }\n  },\n  {\n    board : {\n      id   : 234,\n      name : 'banana-banana'\n    }\n  },\n  {\n    board : {\n      id   : 224,\n      name : 'foobar'\n    }\n  },\n  {\n    board : {\n      id   : 151,\n      name : 'fluffy'\n    }\n  },\n  {\n    board : {\n      id   : 12,\n      name : 'Green-Pea'\n    }\n  },\n  {\n    board : {\n      id   : 1,\n      name : 'Ada-Lovelace'\n    }\n  },\n];\n\nBoard.propTypes = {\n\turl       : PropTypes.string.isRequired,\n\tboardName : PropTypes.string.isRequired\n};\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/\"\n        boardName=\"cathynikki\"\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}